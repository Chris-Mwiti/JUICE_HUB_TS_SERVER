generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// @TODO: Tables id's should correspond with the tables name short form
//@TODO: Add phone property field in the user's model

// User Management Database structure
model User {
  id String @id @default(auto()) @db.ObjectId  @map("_id")
  firstName String  
  lastName String
  avatarUrl String? @default("/avatar.jpg")
  address String? @default("Nairobi")
  role Roles @default(user)
  googleId String? @map("google_id") 
  profileUrl String?
  email String @unique
  emailVerified Boolean? @default(true)
  password String?
  phone String?  @unique
  status UserStatus @default(active)
  company String? @default("Madrigal")
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  session ShoppingSession?
  shipping ShippingDetails? @relation(fields: [shippingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shippingId String? @db.ObjectId
  paymentInfo PaymentDetails[]
  orderDetails OrderDetails[]
  invoicesSent InvoiceReports[] @relation("sender")
  invoicesReceived InvoiceReports[] @relation("receipient")
  refreshToken RefreshTokens[]
  retailerOrders RetailerOrder[]
  retailPayments RetailerPayments[]
  retailerShipping RetailerShippingDetails? @relation(fields: [retailerShippindId], references: [id], onDelete: NoAction, onUpdate:NoAction) 
  retailerShippindId String? @db.ObjectId
  @@map("User")
}

model RefreshTokens{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String @unique @map("refresh_token")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  createdAt DateTime
  updatedAt DateTime
} 

// Product Management 
model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productName String 
  productDescription String 
  sellingPrice Int 
  buyingPrice Int 
  lowLevelAlert Int @default(15)
  isPerishable Boolean @default(false)
  expireDate DateTime?
  productCode String? 
  productLabel String @default("NEW") 
  productTag String?
  productSku String
  productBarCode String @unique
  published Boolean @default(false)
  stockStatus StockStatus @default(IN_STOCK)
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId 
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId String @unique @db.ObjectId
  cartItem CartItems[] 
  orderItem OrderItems[]
  discountIds String[] @db.ObjectId
  discounts Discount[] @relation(fields: [discountIds], references: [id])
  asset ProductAsset[]
  productSales ProductSales[]
  productRefunds ProductRefunds[]
  productRefills ProductRefil[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("Product")
}


model RetailerProducts {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productName String 
  productDescription String 
  sellingPrice Int 
  buyingPrice Int 
  lowLevelAlert Int @default(15)
  isPerishable Boolean @default(false)
  expireDate DateTime?
  productCode String? 
  productLabel String @default("NEW") 
  productTag String?
  productSku String
  productBarCode String @unique
  published Boolean @default(false)
  stockStatus StockStatus @default(IN_STOCK)
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId 
  inventory RetailerInventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId String @unique @db.ObjectId
  supplier SupplierDetails? @relation(fields: [supplierId], references: [id])
  supplierId String? @db.ObjectId
  orderItem RetailerOrderItems[]
  asset RetailerProductAsset[]
  productSales RetailerSales[]
  productRefills RetailerProductRefills[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("RetailerProducts")
}

model RetailerProductAsset {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  images String[]
  productsId  String @db.ObjectId
  product RetailerProducts @relation(fields: [productsId], references: [id])
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("RetailerProductasset")
}

model RetailerProductRefills {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  refilDate DateTime @default(now())
  refilAmount Int 
  status RefillStatus @default(pending) 
  product RetailerProducts @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate:Cascade)
  productId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@map("RetailerProductrefill")

}

model RetailerSales {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  lastPurchaseDate DateTime @default(now()) @map("sales_date")
  sales Int
  product RetailerProducts @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("RetailerProductSales")

}

model RetailerInventory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  productName String @unique @map("product_name")
  lastRefilDate DateTime?
  product RetailerProducts?  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("RetailerInventory")
}
model RetailerShippingDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  county String 
  street String
  town String
  locationDesc String @map("location_desc")
  status ShippingStatus @default(pending)
  createdAt DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")
  user User[]
  order RetailerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId

  @@map("RetailerShippingdetails")

}

model RetailerOrder {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  total Int 
  payment RetailerPayments[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  shippingInfo RetailerShippingDetails[]
  status OrderStatus @default(pending)
  items RetailerOrderItems[]
  updatedAt DateTime @updatedAt 
  createdAt DateTime @default(now()) 

  @@map("RetailerOrders")
}



model RetailerPayments {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  orderPayment RetailerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId
  amount Int 
  provider PaymentProviders @default(mpesa)
  status PaymentStatus @default(pending)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("RetailerPaymentdetails")
}

model RetailerOrderItems {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  order RetailerOrder? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String? @db.ObjectId
  product RetailerProducts @relation(fields: [productId], references: [id], onUpdate: Cascade)
  productId String @db.ObjectId
  quantity Int
  price Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId,orderId])

  @@map("RetailerOrderitems")
}

model ProductRefunds {

  id String @id @default(auto()) @db.ObjectId @map("_id")
  returnDate DateTime @default(now())
  status RefundStatus @default(pending)
  refundQuantity Int
  refundAmount Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String @db.ObjectId
  order OrderDetails @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Productrefunds")
}


model ProductRefil {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  refilDate DateTime @default(now())
  refilAmount Int 
  status RefillStatus @default(pending) 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate:Cascade)
  productId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@map("Productrefill")
}

model ProductSales {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  lastPurchaseDate DateTime @default(now()) @map("sales_date")
  sales Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Productsales")
}


model ProductAsset {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  images String[]
  productsId  String @db.ObjectId
  product Product @relation(fields: [productsId], references: [id])
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("Productasset")
}

//@TODO: Create a supplier model to store supplier details on a particular product
model SupplierDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  companyName String 
  address String 
  phone String 
  product RetailerProducts[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Supplierdetails")
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String @unique 
  categoryDescription String 
  product Product[]
  retailerProducts RetailerProducts[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("Category")
}
model Inventory{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  productName String @unique @map("product_name")
  lastRefilDate DateTime?
  product Product?  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("Inventory")
}
model Discount{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  coupon String @unique
  tokens Int @default(15)
  percentage Int
  status DiscountStatus @default(inactive)
  type DiscountTypes @default(STANDARD)
  expirationDate DateTime 
  products String[] @db.ObjectId
  product Product[] @relation(fields: [products], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("Discount")
}

// Shopping Cart Management
model ShoppingSession {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  total Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  status ShoppingSessionStatus @default(pending)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
  cartItems CartItems[]

  @@map("Shoppingsession")
}
model CartItems{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade)
  productId String @db.ObjectId
  quantity Int 
  session ShoppingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId String @db.ObjectId
  createdAt DateTime
  updatedAt DateTime


  @@map("Cartitems")
}

// Order Structure
model OrderDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  total Int 
  payment PaymentDetails[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  shippingInfo ShippingDetails[]
  status OrderStatus @default(pending)
  orderRefunds ProductRefunds[]
  items OrderItems[]
  updatedAt DateTime @updatedAt 
  createdAt DateTime @default(now()) 
  invoiceReport InvoiceReports?

  @@map("Orderdetails")
}
model OrderItems {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  order OrderDetails? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String? @db.ObjectId 
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade)
  productId String @db.ObjectId
  quantity Int
  price Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("Orderitems")
}
model PaymentDetails {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  orderPayment OrderDetails @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId
  amount Int 
  provider PaymentProviders @default(mpesa)
  status PaymentStatus @default(pending)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  @@map("Paymentdetails")

}

model ShippingDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  county String 
  street String
  town String
  locationDesc String @map("location_desc")
  status ShippingStatus @default(pending)
  createdAt DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")
  user User[]
  order OrderDetails @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @db.ObjectId

  @@map("Shippingdetails")
}




//Invoices, Reports, Sales Managment
model InvoiceReports {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  description String
  receipient User @relation("receipient",fields: [receipientId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  receipientId String @db.ObjectId
  sender User @relation("sender",fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId String @db.ObjectId
  order OrderDetails @relation(fields: [orderId], references: [id])
  orderId String @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("invoice_reports")
}

model Notifications {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  type NotificationTypes
  message String
  level NotificationsLevel @default(important)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationTypes {
  products
  users
  orders
}

enum NotificationsLevel {
  important
  crucial
  info
}

enum Roles {
  user
  admin
}

enum RefillStatus {
  pending
  completed
}

enum RefundStatus {
  pending
  approved
}

enum DiscountStatus {
  active
  inactive
}

enum ShoppingSessionStatus {
  pending
  completed
}

enum PaymentProviders {
  mpesa
  paypal
}

enum OrderStatus {
  canceled
  pending
  completed
  refunded
}

enum PaymentStatus {
  pending
  completed
  refunded
}

enum ShippingStatus {
  pending
  completed
  incomplete
}

enum DiscountTypes {
  BOGO
  MNP
  STANDARD
}

enum StockStatus {
  IN_STOCK
  OUT_STOCK 
}

enum UserStatus {
  active
  inactive
  banned
}